// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  role  String  @default("user")
  admin   Admin?
  customer Customer?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  fullDescription String?
  price           Float
  originalPrice   Float?
  stock           Int
  category        String
  imageUrl        String?
  imageUrls       String[]
  status          String   @default("active") // active, inactive
  featured        Boolean  @default(false)
  sku             String?  @unique
  barcode         String?  @unique
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  orderItems      OrderItem[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
}

model Customer {
  id        Int      @id @default(autoincrement())
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
  address   String?
  phone     String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Order {
  id         Int      @id @default(autoincrement())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]
  total      Float
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model OrderItem {
  id       Int      @id @default(autoincrement())
  orderId  Int
  order    Order    @relation(fields: [orderId], references: [id])
  productId Int
  product  Product  @relation(fields: [productId], references: [id])
  quantity Int
  price    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
